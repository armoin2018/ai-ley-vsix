{
  "name": "ai-ley",
  "displayName": "AI-Ley",
  "description": "Automatically manages AI-Ley configurations and connects to the AI-Ley MCP dashboard. Syncs AI assistant configurations for GitHub Copilot, Claude, Gemini, Cursor, and more.",
  "version": "2.7.0",
  "publisher": "ArmoinLLC",
  "license": "CC0-1.0",
  "icon": "icon.png",
  "repository": {
    "type": "git",
    "url": "https://github.com/armoin2018/ai-ley-vsix.git"
  },
  "homepage": "https://github.com/armoin2018/ai-ley-vsix#readme",
  "bugs": {
    "url": "https://github.com/armoin2018/ai-ley-vsix/issues"
  },
  "galleryBanner": {
    "color": "#1e1e1e",
    "theme": "dark"
  },
  "engines": {
    "vscode": "^1.85.0"
  },
  "keywords": [
    "ai",
    "copilot",
    "claude",
    "gemini",
    "cursor",
    "ai-assistant",
    "configuration",
    "dashboard",
    "node-red"
  ],
  "categories": [
    "Other",
    "Programming Languages"
  ],
  "activationEvents": [
    "onStartupFinished"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "aiLey.openDashboard",
        "title": "AI-Ley: Open Dashboard",
        "category": "AI-Ley"
      },
      {
        "command": "aiLey.syncConfigurations",
        "title": "AI-Ley: Sync Configurations",
        "category": "AI-Ley"
      },
      {
        "command": "aiLey.forceUpdate",
        "title": "AI-Ley: Force Update from Repository",
        "category": "AI-Ley"
      },
      {
        "command": "aiLey.refresh",
        "title": "AI-Ley: Refresh (Check Cache & Sync)",
        "category": "AI-Ley"
      },
      {
        "command": "aiLey.configureMcpServer",
        "title": "AI-Ley: Configure MCP Server",
        "category": "AI-Ley"
      },
      {
        "command": "aiLey.cleanupBackups",
        "title": "AI-Ley: Cleanup Old Backup Files",
        "category": "AI-Ley"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "aiLey.openDashboard",
          "when": "true"
        },
        {
          "command": "aiLey.syncConfigurations",
          "when": "true"
        },
        {
          "command": "aiLey.forceUpdate",
          "when": "true"
        },
        {
          "command": "aiLey.refresh",
          "when": "true"
        },
        {
          "command": "aiLey.configureMcpServer",
          "when": "true"
        },
        {
          "command": "aiLey.cleanupBackups",
          "when": "true"
        }
      ],
      "explorer/context": [
        {
          "command": "aiLey.refresh",
          "group": "aiLey@1",
          "when": "true"
        },
        {
          "command": "aiLey.syncConfigurations",
          "group": "aiLey@2",
          "when": "true"
        },
        {
          "command": "aiLey.forceUpdate",
          "group": "aiLey@3",
          "when": "true"
        }
      ],
      "editor/context": [
        {
          "command": "aiLey.refresh",
          "group": "aiLey@1",
          "when": "true"
        }
      ]
    },
    "configuration": {
      "type": "object",
      "title": "AI-Ley",
      "properties": {
        "aiLey.repository.url": {
          "type": "string",
          "default": "https://github.com/armoin2018/ai-ley.git",
          "description": "GitHub repository URL for AI-Ley configurations.",
          "scope": "window",
          "order": 0
        },
        "aiLey.repository.branch": {
          "type": "string",
          "default": "main",
          "description": "Branch to clone from the AI-Ley repository.",
          "scope": "window",
          "order": 1
        },
        "aiLey.cache.directory": {
          "type": "string",
          "default": ".cache/ai-ley",
          "description": "Local cache directory for AI-Ley repository (relative to workspace root).",
          "scope": "window",
          "order": 2
        },
        "aiLey.update.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable automatic updates from the AI-Ley repository.",
          "scope": "window",
          "order": 10
        },
        "aiLey.update.interval": {
          "type": "number",
          "default": 86400,
          "description": "Interval in seconds to check for updates (0 to disable auto-update, default: 86400 = 24 hours).",
          "scope": "window",
          "order": 11
        },
        "aiLey.contribute.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable contributing back updates to the AI-Ley repository when local changes are detected in .ai-ley/shared.",
          "scope": "window",
          "order": 12
        },
        "aiLey.autoInit.newProjects": {
          "type": "boolean",
          "default": false,
          "description": "Automatically initialize AI-Ley when a new project is opened (project without existing AI-Ley configuration).",
          "scope": "application",
          "order": 20
        },
        "aiLey.autoInit.existingProjects": {
          "type": "boolean",
          "default": false,
          "description": "Automatically initialize AI-Ley for existing projects that match the pattern.",
          "scope": "application",
          "order": 21
        },
        "aiLey.autoInit.projectPattern": {
          "type": "string",
          "default": ".*",
          "description": "Regex pattern to match project names for automatic AI-Ley initialization. Only applies when 'Auto Init: Existing Projects' is enabled.",
          "scope": "application",
          "order": 22
        },
        "aiLey.gitignore.autoUpdate": {
          "type": "boolean",
          "default": true,
          "description": "Automatically update .gitignore with AI-Ley files and directories.",
          "scope": "window",
          "order": 30
        },
        "aiLey.safety.createBackups": {
          "type": "boolean",
          "default": true,
          "description": "Create backup copies of existing files before overwriting them during synchronization. Recommended for preserving existing .project files.",
          "scope": "window",
          "order": 31
        },
        "aiLey.agentic.generic": {
          "type": "boolean",
          "default": true,
          "description": "Copy generic agent configuration files (AGENT.md, AGENTS.md).",
          "scope": "window",
          "order": 40
        },
        "aiLey.agentic.githubCopilot": {
          "type": "boolean",
          "default": true,
          "description": "Copy GitHub Copilot configuration files (.github/copilot-instructions.md).",
          "scope": "window",
          "order": 41
        },
        "aiLey.agentic.claude": {
          "type": "boolean",
          "default": false,
          "description": "Copy Claude configuration files (CLAUDE.md, .claude/).",
          "scope": "window",
          "order": 42
        },
        "aiLey.agentic.gemini": {
          "type": "boolean",
          "default": false,
          "description": "Copy Gemini configuration files (GEMINI.md, .gemini/).",
          "scope": "window",
          "order": 43
        },
        "aiLey.agentic.cursor": {
          "type": "boolean",
          "default": false,
          "description": "Copy Cursor configuration files (.cursor/, cursor-config.json).",
          "scope": "window",
          "order": 44
        },
        "aiLey.agentic.windsurf": {
          "type": "boolean",
          "default": false,
          "description": "Copy Windsurf configuration files (.windsurf/, windsurf-config.json).",
          "scope": "window",
          "order": 45
        },
        "aiLey.agentic.cline": {
          "type": "boolean",
          "default": false,
          "description": "Copy Cline configuration files (.clinerules/).",
          "scope": "window",
          "order": 46
        },
        "aiLey.agentic.roo": {
          "type": "boolean",
          "default": false,
          "description": "Copy Roo configuration files (.roorules/).",
          "scope": "window",
          "order": 47
        },
        "aiLey.agentic.codex": {
          "type": "boolean",
          "default": false,
          "description": "Copy Codex configuration files (.codex/).",
          "scope": "window",
          "order": 48
        },
        "aiLey.agentic.opencode": {
          "type": "boolean",
          "default": false,
          "description": "Copy OpenCode configuration files (.opencode/).",
          "scope": "window",
          "order": 49
        },
        "aiLey.agentic.metis": {
          "type": "boolean",
          "default": false,
          "description": "Copy Metis configuration files (.metis/).",
          "scope": "window",
          "order": 50
        },
        "aiLey.dashboardUrl": {
          "type": "string",
          "default": "http://localhost:1880/dashboard",
          "description": "Base URL of the AI-Ley dashboard. When MCP is enabled, ProjectName parameter will be automatically appended.",
          "scope": "window",
          "order": 60
        },
        "aiLey.mcp.enabled": {
          "type": "boolean",
          "default": false,
          "description": "Enable AI-Ley MCP server integration.",
          "scope": "window",
          "order": 61
        },
        "aiLey.mcp.serverUrl": {
          "type": "string",
          "default": "http://localhost:1880/mcp",
          "description": "URL of the AI-Ley MCP server.",
          "scope": "window",
          "order": 62
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "package": "vsce package"
  },
  "dependencies": {
    "node-fetch": "^2.7.0",
    "simple-git": "^3.25.0"
  },
  "devDependencies": {
    "@types/node": "^18.18.0",
    "@types/node-fetch": "^2.6.11",
    "@types/vscode": "^1.85.0",
    "typescript": "^5.3.0",
    "vsce": "latest"
  }
}
